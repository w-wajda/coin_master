name: Build

on:
  release:
    types: [ published ]
    tags:
      - v*

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.release.outputs.version }}
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Docker Meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          flavor: |
            latest=false
          images: |
            ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.REPOSITORY_NAME }}
          tags: |
            type=semver,pattern={{version}}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.release.outputs.version }}
          fetch-depth: 0

      - uses: azure/setup-kubectl@v3
        id: install

      - uses: azure/k8s-set-context@v3
        with:
          method: service-account
          k8s-url: ${{ secrets.K8S_URL }}
          k8s-secret: ${{ secrets.K8S_SECRET }}
        id: setcontext

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set imagePullSecret
        uses: azure/k8s-create-secret@v4
        with:
          namespace: 'apps'
          secret-name: 'registry-secret'
          container-registry-url: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.REPOSITORY_NAME }}
          container-registry-username: AWS
          container-registry-password: ${{ steps.login-ecr.outputs.docker_password_250611156274_dkr_ecr_eu_west_1_amazonaws_com }}
        id: create-secret

      - name: Docker Meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          flavor: |
            latest=false
          images: |
            ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.REPOSITORY_NAME }}
          tags: |
            type=semver,pattern={{version}}

      - uses: azure/k8s-bake@v2.4
        with:
          renderEngine: 'helm'
          helmChart: './deployment/helm/'
          overrideFiles: './deployment/helm/values.yaml'
          overrides: |
            replicas:2
          helm-version: 'latest'
        id: bake

      - name: Deploy image
        uses: azure/k8s-deploy@v4
        with:
          images: ${{ steps.meta.outputs.tags }}
          imagepullsecrets: |
            registry-secret
          manifests: ${{ steps.bake.outputs.manifestsBundle }}
          strategy: canary
          action: deploy
          percentage: 20
          namespace: apps