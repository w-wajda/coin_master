[tool.poetry]
name = "coin-master"
version = "0.1.0"
description = ""
authors = ["Wioletta Wajda <wioletta.wajda@devsoft.pl>"]
readme = "README.md"
packages = [{ include = "app" }]

[tool.poetry.dependencies]
python = "^3.12.7"
fastapi = "^0.115.4"
pydantic = "^2.9.2"
python-dotenv = "^1.0.0"
uvicorn = { extras = ["standard"], version = "^0.32.0" }
alembic = "^1.8.0"
psycopg = "^3.2.3"
psycopg2-binary = "^2.9.10"
redis = { extras = ["hiredis"], version = "^5.2.0" }
sqlalchemy = {extras = ["mypy"], version = "^2.0.36"}
pydantic-settings = "^2.6.1"
asyncpg = "^0.30.0"
alembic-postgresql-enum = "^1.1.2"
anyio = "^4.6.2"
email-validator = "^2.1.1"
python-multipart = "^0.0.17"
pillow = "^11.0.0"
boto3 = "^1.35.55"
pydantic-extra-types = "^2.10.0"
dependency-injector = "4.43.0"
sentry-sdk = {extras = ["asyncpg", "celery", "fastapi", "sqlalchemy", "starlette"], version = "^2.18.0"}
fastapi-mail = "^1.4.1"
pwdlib = {extras = ["argon2"], version = "^0.2.1"}
asyncclick = "^8.1.7.2"

[tool.poetry.group.dev.dependencies]
aiosqlite = "^0.20.0"
black = "^24.3.0"
boto3-stubs = {extras = ["essential"], version = "^1.34.145"}
coverage = "^7.5.1"
factory-boy = "^3.3.0"
flake8 = "7.1.1"
httpx = "^0.27.0"
isort = "^5.12.0"
mypy = "^1.4.1"
pre-commit = "^3.3.3"
pytest = "^8.1.1"
pytest-asyncio = "^0.23.6"
pytest-cov = "^4.1.0"
pytest-env = "^1.1.3"
types-passlib = "^1.7.7.20240327"
pytest-timeout = "^2.3.1"
ruff = "^0.6.9"
locust = "^2.31.8"
flake8-bugbear = "^24.8.19"
flake8-comprehensions = "^3.15.0"
flake8-simplify = "^0.21.0"

[tool.pytest.ini_options]
minversion = "6.0"
pythonpath = [
    "app/",
    "tests/",
]
env = [
    "RUN_ENV=test",
]
timeout = 15
# --cov=app/ --cov-report=term-missing --cov-report=html --cov-report=xml  --cov-fail-under=100 --durations=10
addopts = "--no-header -v --new-first --showlocals"
testpaths = ["tests", "tests/integrations"]
norecursedirs = [
    ".git",
    ".cache",
    "tmp*",
]

asyncio_mode = "auto"

[tool.coverage.run]
omit = [
    "app/db/migrations/*",
    "tests/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "if TYPE_CHECKING:",
    "raise AssertionError",
    "raise NotImplementedError",
    "@(abc\\.)?abstractmethod",
]
[tool.coverage.html]
directory = "htmlcov"

[tool.black]
line-length = 120
exclude = '''

(
  /(
    | \.git
    | migrations
    | \.env
  )/
)
'''

[tool.isort]
line_length = 120
multi_line_output = 3
force_grid_wrap = 2
indent = 4
use_parentheses = true
include_trailing_comma = true
lines_after_imports = 2
combine_as_imports = true
sections = "FUTURE,STDLIB,THIRDPARTY,FIRSTPARTY,LOCALFOLDER"
skip = [".git", "migrations", ".env"]
profile = "black"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
mypy_path = "app"
python_version = "3.12"
#strict = true
exclude = [
    "app/infrastructure/migrations/*",
]

[[tool.mypy.overrides]]
module = "factory"
ignore_missing_imports = true

[tool.semantic_release]
version_toml = ["pyproject.toml:tool.poetry.version"]
commit_message = "chore(release): {version}"
tag_format = "v{version}"
commit_author = "github-actions <action@devsoft.pl>"

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease = false
prerelease_token = "beta"

[tool.semantic_release.commit_parser_options]
allowed_tags = ["build", "chore", "ci", "docs", "feat", "fix", "perf", "style", "refactor", "revert"]
minor_tags = ["feat"]
patch_tags = ["build", "chore", "ci", "fix", "perf", "style", "refactor", "revert"]

[tool.semantic_release.changelog]
template_dir = "semantic_template"
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = ["build", "chore", "ci", "docs", "perf", "refactor", "revert", "style"]

[tool.semantic_release.remote]
name = "origin"
type = "github"